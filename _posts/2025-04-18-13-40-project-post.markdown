---
layout: post
title:  "저비용·고효율: 인버터 원격 모니터링 및 공정 준비 자동화"
date:   2025-04-18 13:40:00 +0900
categories: [konkuk, project]
--- 

> **목표**  
> - **경량형 스마트 제조 시스템** 구현  
> - **강산 FA**와 같은 중소 제조 업체의 **인버터 판넬 조립 공정**에 집중 → _생산성 ↑ · 오류 ↓ · 인건비 ↓_  
> - **데이터 기반 의사 결정** 및 **원격 모니터링**으로 유지보수 부담 완화  


---

<a id="WiFi"></a>
## ① Wi‑Fi 인버터 **원격 모니터링 솔루션**

> 장비 패널에 **ESP32 + MAX485 세트**를 연결 →  
> **현장 출동 없이** 스마트폰·PC에서 _온도·전류·Fault 코드_ 확인 & 긴급 **Remote Reset** 가능!


- **설치 위치**: 인버터 내부 통신 단자 (RS-485) 근처에 작은 ESP32 모듈을 부착합니다.  

  대부분의 인버터에는 기본적으로 RS-485가 탑재돼 있으며, 커넥터 또는 단자대 형태로 존재합니다.



- **작동 방식**:  

  ESP32가 인버터의 온도, 출력 전류, 고장 알람 코드를 Modbus RTU로 받아들인 후,  

  **Wi-Fi를 통해 본사 MQTT 서버로 전송**합니다.  

  웹 대시보드(Grafana)를 통해 **원격에서 실시간으로 온도/전류 상태를 확인**하고,  

  필요 시 **“리셋” 명령을 원격으로 전송**할 수 있습니다.



- **작업자 체감**:  

  “기존엔 현장 가서 직접 리셋 버튼 눌렀어야 했는데, 지금은 스마트폰만 있으면 돼요.”  

  A/S 출장 없이 간단한 문제는 본사에서 해결 가능해집니다.


- **RS-485가 없을 경우 대안**:
  - **CT 전류 센서(SCT-013)** + **ADS1115** ADC → 케이블 전류 측정
  - **DS18B20 온도 센서** → 외부 온도 측정
  - **인버터 알람 릴레이 접점** → 단순 이상 발생 여부 감지
  - 위 센서들을 ESP32에 연결해 대시보드 구성 


### 🧩 구성 부품

| 부품 | 수량 |
|:-----|:----:|
| ESP32‑DevKit | 1 |
| MAX485 RS‑485 컨버터 | 1 |
| 5 V 어댑터·케이블 | 1 |

### 🔧 오픈소스·설치

| 단계 | 명령 | 비고 |
|:-----|:-----|:-----|
| 펌웨어 플래시 | `esptool.py --chip esp32 write_flash 0x1000 firmware.bin` | `gmasse/esp-modbus-mqtt` Hex 사용 |
| 브로커 설치 | `docker compose up -d emqx grafana timescale` | 10분 내 풀스택 기동 |
| 대시보드 임포트 | Grafana → _Import JSON_ → 제공된 ① 패널 | 실시간 그래프 확인 |

### ✅ 기대 효과

| 지표 | 변동 | 근거 |
|:-----|:-----|:-----|
| A/S 출장 횟수 | **▼ 30%** | 단순 오류(오버로드·발열) → 원격 리셋 가능 |
| 예지보전 정확도 | **▲ 20%** | 1 Hz 단위 시계열 DB 축적 → 이상 패턴 조기 감지 |

---

<a id="BOM"></a>
## ② BOM 기반 **케이블 자동 커팅·라벨링 솔루션**

> Excel BOM 업로드 → **필요 길이만** 정밀 커팅 + **열전사 라벨** 즉시 부착  
> 배선 공정 직전 준비 시간을 절반으로!

- **설치 위치**: 공장 사무실 또는 작업실 한 켠에 1m 정도 되는 작업대 위.  
  Arduino와 스텝모터, 릴센서, 솔레노이드 커터, 중고 라벨기 등이 조립되어 있습니다.

- **작동 방식**:  
  작업자는 BOM Excel 파일을 Python 프로그램에 업로드합니다.  
  프로그램이 선 길이를 계산하여 스텝모터로 선을 밀고,  
  정확한 길이만큼 자른 뒤, Zebra 라벨러로 **“L1: 빨간선”** 같은 라벨을 출력해 부착합니다.

- **작업자 체감**:  
  “선 자르고, 이름 써 붙이는 데 두 시간이 걸렸는데, 이제는 기계가 다 해줘요. 커피 마시고 오면 끝입니다.”  
  **총 작업 시간 약 40% 감소** 효과가 있습니다.

### 🧩 구성 부품

| 부품 | 수량 |
|:-----|:----:|
| Arduino Nano | 1 |
| NEMA17 스텝모터 | 1 |
| 커팅 솔레노이드 | 1 |
| 광학 릴 센서 | 1 |
| Zebra GK420 (중고) | 1 |

### 🔧 오픈소스·사용법
1. `python bom_to_gcode.py mylist.xlsx` → `out.gcode` 생성  
2. SD카드 삽입 → 아두이노가 모터·커터·라벨러 자동 제어  
3. 라벨 템플릿은 ZPL 언어로 제공 → 크기·QR 코드 자유 변경

### ✅ 효과
- **준비 시간** 120 min → **70 min** (‑41%)  
- 잘못된 케이블 삽입 오류 **2건/주 → 0.3건/주**

---

<a id="YOLO"></a>
## ③ YOLO + GPT **조립 실수 감지** PoC 어드바이저 솔루션

> **실시간 비전 + 생성형 AI** 조합  
> "_B상 단자에 파란 전선이 연결돼 있습니다. 빨간 전선으로 교체하세요._"

- **설치 위치**:  
  초록색 철제 작업대 위쪽에 **카메라 2대**와 LED 조명을 설치합니다.  
  또는 실험적으로는 스마트폰을 작업자 가슴에 착용(바디캠 방식)해 구현할 수도 있습니다.

- **작동 방식**:  
  Jetson Nano 혹은 PC에서 **YOLOv8 모델이 실시간 영상 분석**  
  → 잘못된 배선(예: 빨간선이 꽂혀야 할 자리에 파란선)이 감지되면  
  → GPT가 이를 자연어로 변환 (“L1에는 빨간 전선을 연결해 주세요”)  
  → 태블릿에 메시지로 출력되거나 스피커로 음성 출력

- **작업자 체감**:  
  “처음엔 뭘 잘못했는지도 몰랐는데, 지금은 화면이 바로 알려줘서 더 정확하게 할 수 있어요.”  
  실수율이 눈에 띄게 줄고, **초보자도 빠르게 업무 적응 가능**합니다.


### 🧩 구성 부품

| 부품 | 수량 |
|:-----|:----:|
| Jetson Nano 4 GB | 1 |
| RPi Camera v3 | 2 |
| LED 바 조명 | 2 |

### 🔧 파이프라인
1. YOLOv8n 모델 학습 (`ultralytics train data=custom.yaml epochs=30`)  
2. `fastapi` 서버에서 결과 JSON → LangChain Prompt  
3. GPT‑3.5 Turbo 호출 → 자연어 메시지  
4. Streamlit 대시보드 + WebSocket 푸시

### ✅ 성능
- Top‑1 오류 검출 정확도 **≈ 92%**  
- 재작업률 **50% 감소**, 현장 피드백 < 0.1 s latency

---

<a id="Robot"></a>
## ④ 로봇팔 기반 **자동 볼트 체결 솔루션**  
_관건(M3~M4 대응 · Z 자동 감지 · CAD 좌표 변환)_

- **설치 위치**: 조립 작업대 옆 또는 대형 판넬 작업장.  
  협동로봇(uFactory Lite 6)이 설치되며, 전동 드라이버와 힘 센서를 부착합니다.

- **작동 방식**:  
  고객 주문에 따라 매번 다른 인버터 CAD 파일(DXF 형식)을 불러와  
  → 볼트 위치 좌표를 자동 추출  
  → 로봇팔이 지정 위치로 이동  
  → 힘 센서로 Z축 압력을 감지하며 자동 정지  
  → 정해진 토크로 자동 체결

- **작업자 체감**:  
  “매번 다른 제품이라 조이는 위치도 다 달랐는데, 이제는 CAD만 주면 로봇이 알아서 다 해요.”  
  체결 속도 **3배 증가**, 손목 부상도 줄어들며 **품질 편차가 ±3%로 줄어듭니다.**

### 🧩 구성 부품

| 부품 | 수량 |
|:-----|:----:|
| uFactory Lite 6 로봇팔 | 1 |
| HIOS NXA‑503 스마트 드라이버 | 1 |
| 6축 힘 센서 | 1 |

> *저예산 대안* : 스프링 노즈 사용

### 🔧 관건 기술
- **CAD DXF → 좌표 추출** : `ezdxf` 이용, CIRCLE 엔티티 → (x, y)  
- **Z 자동 감지** : 힘 5 N 감지 시 로봇 Z정지 → 토크 체결  
- **ROS 2 제어** : `ufactory_ros2` 패키지로 `.move_to()` 반복

### ✅ 성과

| 메트릭 | 기존 | 자동화 |
|:------:|:----:|:------:|
| 체결 속도 | 30 s | **10 s** |
| 토크 편차 | ±15% | **±3%** |
| Teach 필요 | 모델마다 10 min | **CAD만 교체** |

---

<a id="Budget"></a>
## 💰 예산 총괄

| 모듈 | 비용(₩) |
|:-----|:-------:|
| ① 모니터링 (5세트) | 60,000 |
| ② 케이블 컷·라벨 | 185,000 |
| ③ YOLO PoC | 160,000 |
| ④ 로봇팔 체결 | 1,650,000 |
| **총계** | **2,055,000** |

> **스프링 노즈 버전** : 총 1,505,000 원 (힘 센서 제외)

---

<a id="NoPlatform"></a>
## 🚀 사업화 전략 및 확장성

본 과제는 단순한 스마트팩토리 기술 구현을 넘어,  
**중소 제조업의 유통구조 개선**까지 염두에 둔 구조로 설계하였습니다.

> 현재 강산 FA는 "제품이 주문마다 달라 사전 제작이 불가능한" 시장 특성을 갖고 있으며,  
> 이는 **온라인 유통의 진입 장벽**이자 동시에 **기회**입니다.

따라서 본 과제에서 구축한 **자동화 조립·진단 시스템**은  
향후 다음과 같은 형태의 유통 자동화와 연결할 수 있습니다:

- **고객이 직접 사양을 선택**(전압, 용량, 기구 크기 등)
- 시스템이 **모델 번호 자동 생성** (e.g. KS-IV-0.75K-W-485)
- 예상 납기일/단가가 자동 출력 → 온라인 주문 접수
- **제작 자동화** 시스템과 연계되어 납기 자동 스케줄링

이를 통해 다음과 같은 **사업화 시너지를 도모**할 수 있습니다:

| 전략 | 효과 |
|------|------|
| 생산 + 유통 일체형 | BTO 제품도 온라인 판매 가능 |
| 수작업 견적 대응 감소 | 소규모 주문 대응 가능성 확대 |
| SaaS형 서비스로 분리 | 추후 타 제조사에도 모듈 판매 가능 |

※ 본 플랫폼은 과제 외 별도 MVP로 시범 개발 예정
---

## 🎯 기대 효과

| 항목 | 개선 전 | 개선 후 | 효과 |
|:-----|:--------|:--------|:-----|
| 케이블 준비 | 120 min | 70 min | **‑41%** |
| A/S 출장 | 월 10회 | 월 7회 | **‑30%** |
| 조립 오류 | 1.5% | 0.75% | **‑50%** |
| 볼트 체결 편차 | ±15% | ±3% | 제품 신뢰도 ↑ |
| 공정 인건비 | 기준 100 | 60–70 | **30–40% 절감** |

---

## ✔️ 핵심 메시지

| |
|:-|
| ✅ 단순 반복·고위험 작업 자동화 → **현장 만족도·품질 동시 향상** |

---