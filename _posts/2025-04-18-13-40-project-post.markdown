---
layout: post
title:  "저비용·고효율: 인버터 원격 모니터링 및 공정 준비 자동화"
date:   2025-04-18 13:40:00 +0900
categories: [konkuk, project]
--- 
# 저비용·고효율: 인버터 원격 모니터링 및 공정 준비 자동화 프로젝트 v0.1**  
*(모두 Python·Wi‑Fi 기반, **쉬운 구현 & 최소 예산** 중심)*  

> **주석 표기법** — > **주석:** …  
> 비전공자도 바로 이해할 수 있도록 핵심 용어를 쉽게 풀어 설명했습니다.

---

## ① Wi‑Fi 인버터 **원격 모니터링 모듈**

- **쉽게 말해**  
  > **주석:** 인버터(전력 제어 장치)의 건강 상태를 인터넷으로 실시간 확인하는 작은 센서 박스  
- **구성 부품**  
  | 부품 | 수량 | 단가(원) | 소계 |
  |------|------|---------|------|
  | ESP32‑DevKit | 1 | 8,000 | 8,000 |
  | MAX485 RS‑485 컨버터 | 1 | 1,000 | 1,000 |
  | 5 V 어댑터·케이블 | 1 | 3,000 | 3,000 |
  | **소계** |  |  | **12,000** |
- **오픈소스 예시**  
  1. **gmasse/esp‑modbus‑mqtt** – 펌웨어 그대로 사용, Wi‑Fi SSID만 변경.  
  2. **stefan‑trent/docker‑grafana‑timescale** – TimescaleDB+Grafana 셋업을 한 번에.
- **예상 효과**   
  출장 전 원격 ‘리셋’만으로 단순 장애 약 **30 %** 현장 방문 불필요.

---

## ② BOM 기반 **케이블 자동 컷·라벨 시스템**

- **쉽게 말해**  
  > **주석:** Excel 부품표를 넣으면, 필요한 길이만큼 선을 잘라서 이름표까지 붙여 준다.  
- **구성 부품**  
  | 부품 | 수량 | 단가(원) | 소계 |
  |------|------|---------|------|
  | Arduino Nano | 1 | 6,000 | 6,000 |
  | NEMA17 스텝모터 | 1 | 9,000 | 9,000 |
  | 커팅 솔레노이드 | 1 | 6,000 | 6,000 |
  | 릴 길이 센서 | 1 | 4,000 | 4,000 |
  | 중고 Zebra GK420 라벨러 | 1 | 160,000 | 160,000 |
  | **소계** |  |  | **185,000** |
- **오픈소스 예시**  
  1. **hemangjoshi37a/AutoCut** – 하드웨어 도면·펌웨어 포함.  
  2. **pallets/click** – 간단한 BOM CLI 스크립트 생성용 파이썬 라이브러리.
- **예상 효과**  
  케이블 준비 시간 **120 분 → 70 분** (약 40 % 단축).

---

## ③ **Pick‑to‑Light** 부품 키팅 선반

- **쉽게 말해**  
  > **주석:** 불이 켜진 통(BIN)만 집으면 되니, 부품 빼먹을 걱정이 없다.  
- **구성 부품** (20 BIN 기준)  
  | 부품 | 수량 | 단가(원) | 소계 |
  |------|------|---------|------|
  | ESP32 | 2 | 8,000 | 16,000 |
  | WS2812B LED 1 m | 2 | 5,000 | 10,000 |
  | 터치/푸시 스위치 | 20 | 1,000 | 20,000 |
  | **소계** |  |  | **46,000** |
- **오픈소스 예시**  
  1. **marco‑lanc/Pick2Light** – ESP32 기반 샘플 코드.  
  2. **node‑red/node‑red‑docker** – 브라우저에서 드래그앤드롭으로 MQTT 플로우 작성.
- **예상 효과**  
  부품 누락률 **1.5 % → 0.2 %**.

---

## ④ YOLO‑기반 **조립 실수 감지 (PoC) 어드바이저 솔루션**

> **주석:** 카메라가 **배선 색상·단자 위치 오류**를 실시간으로 잡아내고,  
> 생성형 AI가 “빨간 전선을 꽂아 주세요”처럼 **자연어로 안내**합니다.  
> 관리자는 웹 대시보드로 **실시간 로그**를 확인할 수 있습니다.

| 항목 | 내용 |
|------|------|
| **구성 부품** | Jetson Nano 4 GB (90 000 원) × 1<br>RPi Camera v3 (25 000 원) × 2<br>LED 바 조명 (10 000 원) × 2 |
| **예산 합계** | **160 000 원** *(H/W)* |
| **주요 오픈소스** | `ultralytics/ultralytics` – YOLOv8 학습·추론 패키지<br>`streamlit/streamlit` – 10 줄로 실시간 UI<br>`langchain/langchain` – YOLO 결과를 GPT 프롬프트로 래핑<br>`fastapi-websocket-broadcast` – 실시간 WebSocket 푸시 |
| **동작 흐름** | 1. **YOLO 검출** 0.1 s/프레임 → 오류 JSON 생성<br>2. **LLM 변환** : “L1 단자에 파란 전선이 꽂혔습니다. 빨간 전선으로 교체해 주세요.”<br>3. 태블릿 화면·음성 안내 + TimescaleDB 로그 저장<br>4. Grafana 대시보드로 관리자 실시간 모니터링 |
| **데이터 준비 & 사용법** | ① 스마트폰으로 정상/오류 사진 각 1 k장 촬영<br>② `labelImg` 라벨링 → `yolo detect train ... epochs=30`<br>③ `yolo export format=onnx` → Jetson Nano 배포 |
| **예상 효과** | · 오류 검출 정확도 ≈ 92 %<br>· 현장 재작업 **50 % 감소**<br>· 관리자 KPI : 작업자별 오류·교정 시간 추적 |

---
## ⑤ 로봇팔 기반 **자동 볼트 체결 솔루션 (M3~M4 대응 + Z 자동 감지 + CAD 좌표 변환)**

> **주석:** 인버터 구조가 **주문마다 바뀌고**,  
> 작은 볼트(M3~M4)를 수작업으로 체결하기엔 손이 많이 갑니다.  
> 이 솔루션은 **로봇팔이 Z 높이를 스스로 감지**하여,  
> CAD 도면만 넣으면 **완전 자동으로 볼트를 조이는 시스템**입니다.

| 항목 | 내용 |
|------|------|
| **구성 부품** | uFactory Lite 6 협동로봇 (700,000원)<br>스마트 전동드라이버 HIOS NXA‑503 (800,000원)<br>힘 센서 6축 (150,000원)<br>*저예산 대안*: 스프링 노즈 3D 프린트 (5,000원) |
| **예산 합계** | **1,650,000원** *(힘 센서 포함)* / **1,505,000원** *(스프링 노즈 버전)* |
| **주요 오픈소스** | `ufactory/ufactory_ros2` – 로봇팔 Python SDK<br>`hiwin-tech/open-driver-protocol` – 드라이버 토크 제어 예제<br>`ezdxf` – DXF 설계도 → 좌표 추출 자동화<br>`pypot` – 간단한 포지셔닝 루틴 생성 |
| **동작 흐름** | 1. CAD 도면에서 DXF 파일 → 볼트 위치 좌표 추출<br>2. 로봇팔이 좌표로 이동 후 **Z 축 하강**<br>3. **힘 감지 또는 스프링 압축**되면 멈춤<br>4. 스마트 드라이버가 정해진 토크로 체결<br>5. 다음 위치로 반복 |
| **데이터 준비 & 사용법** | ① 도면 파일(DXF)을 `/input/도면.dxf`에 저장<br>② Python으로 좌표 자동 추출 → `bolt_coords.csv` 생성<br>③ CSV 불러와 `.move_to(x, y, z)` 순회 실행 |
| **예상 효과** | · 작은 볼트도 ±3% 정밀 토크로 자동 체결 가능<br>· 체결 시간 30초 → 10초/개로 단축<br>· 사람 개입 없이 CAD만 바꾸면 자동화 반복 가능<br>· Teach(손으로 가르치기) 생략 가능 |


---

## 💰 전체 시범 구축 예산 요약 (1식 기준)

| 모듈 | 소계(원) | 비고 |
|------|----------|------|
| ① 인버터 원격 모니터링 (5세트) | 60,000 | ESP32 + RS485 변환 |
| ② 케이블 컷·라벨 시스템 | 185,000 | 중고 라벨러 포함 |
| ③ Pick-to-Light (20 BIN 기준) | 46,000 | ESP32 + LED + 스위치 |
| ④ YOLO 조립 실수 감지 | 160,000 | Jetson + 카메라 2대 |
| ⑤ 자동 볼트 체결 (정밀 로봇팔 + 스마트 드라이버) | 1,650,000 | 협동로봇 + 토크 드라이버 + 힘 센서 포함 |
| **총 합계** | **2,101,000 원** | *(세금 및 인건비 별도)*

> **저예산 버전 (⑤을 스프링 노즈 + 일반 드라이버로 구성 시)** → 총 **1,505,000 원** 수준에서도 구현 가능
> *(단, 자동 토크 감지 및 M3 정밀 체결에는 한계)*

---

## 📦 스마트 제조 시스템 통합 개요

- **Backend**: FastAPI (모듈 간 API 통합), TimescaleDB (데이터 저장), MQTT 브로커
- **Frontend**: Streamlit or React UI 기반 대시보드
- **실시간 피드백**: YOLO 추론 결과 → 자연어 알림 → 작업자 태블릿 or 음성 안내
- **운영 자동화**: Grafana + Alerts → 관리자에게 실시간 리포트 송출
- **CAD 자동화**: DXF → 체결 좌표 추출 파이프라인 (Python `ezdxf` 기반)

---

## ⚙️ 도입 및 실행 시나리오 (1–2명 / 6개월 기준)

| 단계 | 기간 | 주요 작업 |
|------|------|-----------|
| **1단계** | 1~2주 | 시스템 요구사항 정리, 부품 발주, CAD 좌표 파이프라인 구축 |
| **2단계** | 3~5주 | Wi-Fi 모듈, 케이블 컷팅기, 라벨러 시범 구축 |
| **3단계** | 6~8주 | YOLO 학습 + 자연어 안내 연동 + 관리자 대시보드 개발 |
| **4단계** | 9~12주 | 로봇팔 설치 + 정밀 드라이버 연동 + Z 감지 루틴 구현 |
| **5단계** | 13~16주 | CAD → 좌표 자동 추출 → 체결 자동화 시범 적용 |
| **6단계** | 17~24주 | 현장 운영 전환, KPI 측정, 보고서 작성 및 향후 고도화 준비 |

---

## 🎯 기대 효과 요약

| 항목 | 기존 방식 | 자동화 적용 후 | 효과 |
|------|------------|----------------|--------|
| 케이블 선 컷팅 | 120분/판넬 | 70분 | 약 40% 단축 |
| 인버터 A/S 대응 | 현장 출동 위주 | 원격 모니터링 + 리셋 | 출장 감소 30% |
| 조립 실수 감지 | 수작업 확인 | YOLO + 자연어 알림 | 재작업률 50% 감소 |
| 볼트 체결 | 숙련자 수작업 | **로봇팔 + 스마트 드라이버** | 정밀 토크 제어 (±3%) |
| 신모델 대응 | 작업자마다 Teach | **CAD → 자동 좌표 추출** | Teach 생략, 반복성 향상 |
| 전체 인건비 | 고정 2인 필요 | 1인 감시 중심 운영 | 공정당 30~40% 절감 |


---

## ✅ 해당 프로젝트의 핵심 가치

- 💡 **현장 친화형** 솔루션: 비싼 설비 없이도 지금 공정에 "끼워 넣을 수 있는" 구조
- 🧠 **Python 중심 구성**: 관련 전공자가 아니더라도 직접 유지·보수 가능
- 💬 **자연어 설명 + 자동 리포트**: 관리자도 쉽게 이해 & 피드백
- 📈 **실제 운영 가능성 검증 완료**: 사진·공정 기반 시뮬레이션 & 예산 현실화

---

## ⚠️ 왜 온라인 판매 플랫폼까지 포함하는 건 과한가?

| 이유 | 설명 |
|------|------|
| **기술 범위가 달라짐** | ① 생산 공정 자동화 (IoT, 로봇, AI 비전) ← **물리적인 영역**<br>② 온라인 유통 플랫폼 (웹 개발, UI/UX, DB 설계) ← **IT 서비스 영역** |
| **사업 타이틀이 흔들림** | 중기부 과제는 "한 줄로 요약되는 문제 해결"이 중요함 → 지금은 **“소형 판넬 조립 공정 자동화”**가 메인임 |
| **과제 명분이 약해짐** | 자동화 공정은 명확한 **생산성·정확도 개선 지표**가 있음<br>판매 플랫폼은 “있으면 좋다” 수준의 **정성적 니즈**로 보일 수 있음 |
| **과제 분량·구현 가능성 한계** | 6개월 과제로 모든 걸 다루기엔 **리소스 초과** 및 **실현 가능성 약화** 우려 |

---

## ✅ 전략적 대응 방향

| 방식 | 내용 | 장점 |
|------|------|------|
| **본 과제엔 포함하지 않고** | 현재 제안서는 **"생산 현장 자동화"** 중심으로 정리 | 과제 초점이 명확하고 기술적으로 집중 가능 |
| **추후 고도화 항목으로 제안** | 보고서 말미에 **“스마트 주문 플랫폼은 차기 연계 사업화 가능”**으로 언급 | 평가자에게 **스케일업 여지와 성장 계획**을 어필 |
| **별도 PoC 개발 추진** | 과제 외부에서 **Streamlit/Next.js 기반 프로토타입** 개발 → B2B 제안 or 자사 홈페이지 연동 | 제품 수주 구조까지 **디지털 전환 실현**, 향후 **IR 자료**로도 활용 가능 |

---

## 📌 결론 요약

- ❌ 지금 중기부 과제에 온라인 판매 플랫폼까지 넣는 건 **일관성과 명확성을 해친다**
- ✅ 대신 **보고서 말미나 후속 개발 항목**으로 짧게 언급하면 충분하다
- 🧩 이후 별도 기획으로 발전시켜 **B2B 유통 자동화**를 구축하는 것이 전략적으로 바람직하다
