---
layout: post
title:  "Runnable"
date:   2025-04-14 13:41:00 +0900
categories: [konkuk, rag-code]
--- 
---
title: LCEL Runnable
layout: default
---

# LCEL의 핵심 구성 요소: Runnable 완전 정복

이 문서는 `05-Runnable.ipynb` 내용을 바탕으로, **LCEL(LangChain Expression Language)**에서 중심이 되는 `Runnable` 개념을 초보자도 쉽게 이해할 수 있도록 정리한 학습 자료입니다.

군더더기 없이 간결하게 설명하고, 실제 사용 가능한 코드 예제를 함께 제공합니다.

---

## 목차
{:toc}


---

## 섹션 1

> 📘 **설명**

## 데이터를 효과적으로 전달하는 방법

- `RunnablePassthrough` 는 입력을 변경하지 않거나 추가 키를 더하여 전달할 수 있습니다. 
- `RunnablePassthrough()` 가 단독으로 호출되면, 단순히 입력을 받아 그대로 전달합니다.
- `RunnablePassthrough.assign(...)` 방식으로 호출되면, 입력을 받아 assign 함수에 전달된 추가 인수를 추가합니다.

```python
# .env 파일을 읽어서 환경변수로 설정
from dotenv import load_dotenv

# 토큰 정보로드
load_dotenv()
```

---

## 섹션 2

> 📘 **설명**

### RunnablePassthrough

```python
# LangSmith 추적을 설정합니다. https://smith.langchain.com
# !pip install -qU langchain-teddynote
from langchain_teddynote import logging

# 프로젝트 이름을 입력합니다.
logging.langsmith("CH01-Basic")
```

---

## 섹션 3

> 📘 **설명**

chain 을 `invoke()` 하여 실행할 때는 입력 데이터의 타입이 딕셔너리여야 합니다.

```python
from langchain_core.prompts import PromptTemplate
from langchain_openai import ChatOpenAI


# prompt 와 llm 을 생성합니다.
prompt = PromptTemplate.from_template("{num} 의 10배는?")
llm = ChatOpenAI(temperature=0)

# chain 을 생성합니다.
chain = prompt | llm
```

---

## 섹션 4

> 📘 **설명**

하지만, langchain 라이브러리가 업데이트 되면서 1개의 변수만 템플릿에 포함하고 있다면, 값만 전달하는 것도 가능합니다.

```python
# chain 을 실행합니다.
chain.invoke({"num": 5})
```

---

## 섹션 5

> 📘 **설명**

아래는 `RunnablePassthrough` 를 사용한 예제입니다.

`RunnablePassthrough` 는 `runnable` 객체이며, `runnable` 객체는 `invoke()` 메소드를 사용하여 별도 실행이 가능합니다.

```python
# chain 을 실행합니다.
chain.invoke(5)
```

---

## 섹션 6

> 📘 **설명**

아래는 `RunnablePassthrough` 로 체인을 구성하는 예제입니다.

```python
from langchain_core.runnables import RunnablePassthrough

# runnable
RunnablePassthrough().invoke({"num": 10})
```

---

## 섹션 7

> 📘 **설명**

다음은 `RunnablePassthrough.assign()` 을 사용하는 경우와 비교한 결과입니다.

```python
runnable_chain = {"num": RunnablePassthrough()} | prompt | ChatOpenAI()

# dict 값이 RunnablePassthrough() 로 변경되었습니다.
runnable_chain.invoke(10)
```

---

## 섹션 8

> 📘 **설명**

`RunnablePassthrough.assign()`

- 입력 값으로 들어온 값의 key/value 쌍과 새롭게 할당된 key/value 쌍을 합칩니다.

```python
RunnablePassthrough().invoke({"num": 1})
```

---

## 섹션 9

> 📘 **설명**

## RunnableParallel

```python
# 입력 키: num, 할당(assign) 키: new_num
(RunnablePassthrough.assign(new_num=lambda x: x["num"] * 3)).invoke({"num": 1})
```

---

## 섹션 10

> 📘 **설명**

Chain 도 RunnableParallel 적용할 수 있습니다.

```python
from langchain_core.runnables import RunnableParallel

# RunnableParallel 인스턴스를 생성합니다. 이 인스턴스는 여러 Runnable 인스턴스를 병렬로 실행할 수 있습니다.
runnable = RunnableParallel(
    # RunnablePassthrough 인스턴스를 'passed' 키워드 인자로 전달합니다. 이는 입력된 데이터를 그대로 통과시키는 역할을 합니다.
    passed=RunnablePassthrough(),
    # 'extra' 키워드 인자로 RunnablePassthrough.assign을 사용하여, 'mult' 람다 함수를 할당합니다. 이 함수는 입력된 딕셔너리의 'num' 키에 해당하는 값을 3배로 증가시킵니다.
    extra=RunnablePassthrough.assign(mult=lambda x: x["num"] * 3),
    # 'modified' 키워드 인자로 람다 함수를 전달합니다. 이 함수는 입력된 딕셔너리의 'num' 키에 해당하는 값에 1을 더합니다.
    modified=lambda x: x["num"] + 1,
)

# runnable 인스턴스에 {'num': 1} 딕셔너리를 입력으로 전달하여 invoke 메소드를 호출합니다.
runnable.invoke({"num": 1})
```

---

## 섹션 11

> 📘 **설명**

## RunnableLambda

RunnableLambda 를 사용하여 사용자 정의 함수를 맵핑할 수 있습니다.

```python
chain1 = (
    {"country": RunnablePassthrough()}
    | PromptTemplate.from_template("{country} 의 수도는?")
    | ChatOpenAI()
)
chain2 = (
    {"country": RunnablePassthrough()}
    | PromptTemplate.from_template("{country} 의 면적은?")
    | ChatOpenAI()
)
```

---

## 섹션 12

> 📘 **설명**

`itemgetter` 를 사용하여 특정 키를 추출합니다.

```python
combined_chain = RunnableParallel(capital=chain1, area=chain2)
combined_chain.invoke("대한민국")
```

---

## 핵심 요약: Runnable이란?

> 💡 `Runnable`은 LCEL에서 가장 기본이자 중요한 구성 요소입니다.

- 모든 LangChain 체인은 `Runnable` 단위로 만들어집니다.
- 하나의 입력을 `.invoke()`로 처리하거나, 여러 입력을 `.batch()`로 처리할 수 있습니다.
- 파이프(`|`) 연산자를 사용하면 여러 단계를 순차적으로 연결할 수 있습니다.

### 자주 사용되는 Runnable 유형

| 클래스 | 설명 |
|--------|------|
| `RunnableLambda` | 간단한 Python 함수를 Runnable로 변환 |
| `RunnablePassthrough` | 입력을 그대로 전달 |
| `RunnableSequence` | 여러 Runnable을 순차적으로 연결 |
| `RunnableParallel` | 여러 Runnable을 동시에 실행 |

> ✅ 위 내용을 복습하며 체인 구조를 직접 구성해보는 것이 LCEL을 이해하는 데 가장 효과적입니다.
